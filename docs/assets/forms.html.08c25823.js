import{_ as o,r as i,o as n,c as l,b as r,a,e}from"./app.aae1f5f9.js";const s={},d=e('<h1 id="forms" tabindex="-1"><a class="header-anchor" href="#forms" aria-hidden="true">#</a> Forms</h1> <h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2> <p>Forms allow users to configure options and submit information, such as feedback or personal details in order to subscribe to a newsletter.</p> <h2 id="form-elements" tabindex="-1"><a class="header-anchor" href="#form-elements" aria-hidden="true">#</a> Form elements</h2> <p><strong>Elements</strong></p> <ul><li>Title (heading levels / optional)</li> <li>Title (optional)</li> <li>Field label</li> <li>Help text (optional)</li> <li>Placeholder text (optional)</li> <li>Text field (optional)</li> <li>Dropdown (optional)</li> <li>Checkbox (optional)</li> <li>Radio button (optional)</li> <li>Error state</li> <li>Disabled state</li> <li>Legal disclaimer (optional)</li> <li>Primary button (optional), see CTAs and buttons</li> <li>Text button (optional,), see CTAs and buttons</li></ul> <hr> <p>HTML Examples or imagery</p> ',16),u={class:"doi-content"},h=e(`
***
<p><strong>Form behaviours</strong></p> <p>Required and optional fields can be used in the form. When the user does not enter a value or make a selection in a required field, error text appears and instructs the user to complete the action in order to submit the form.</p> <p><strong>Text field</strong></p> <ul><li>The field widths should reflect the intended length of the content while still aligning to the responsive column or mini unit grid.</li> <li>Make sure users can enter their information at smaller screen sizes.</li> <li>Truncate when an input is too long to be fully displayed in the field.</li> <li>Pre-populate known values when possible, such as a default IP address.</li> <li>The first required input field in a form should receive focus on presentation to a user.</li></ul> <p><strong>Dropdowns</strong></p> <ul><li>When you have more than 5 options to present to the user, use a dropdown list, not a checkbox or a radio button.</li></ul> <p><strong>Radio buttons</strong></p> <ul><li>Pre-select a default option for the user. If the user selects a different option, the default is deselected.</li> <li>For null options, provide a radio button with the label \u201CNone\u201D.</li></ul> <p><strong>Radio buttons and checkboxes</strong></p> <ul><li>Radio buttons and checkbox item text falls to the right of their controls.</li> <li>When possible, arrange the checkbox and radio button groups vertically for better scannability.</li></ul> <p><strong>Buttons</strong></p> <ul><li>Use a primary button for the main action, and a secondary button for secondary actions like Cancel or Discard.</li> <li>Align buttons to the left on desktop and make full width on mobile.</li> <li>When placing buttons, put the highest priority (primary button) to the left. If there are 2 actions, use secondary on the right.</li> <li>There should be a maximum of 3 buttons.</li></ul>`,24);function c(p,f){const t=i("DoiFormComponents");return n(),l("div",null,[d,r("div",u,[a(t)]),h])}var b=o(s,[["render",c],["__file","forms.html.vue"]]);export{b as default};
